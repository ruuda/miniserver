# Miniserver lego unit.

[Unit]
Description=Letâ€™s Encrypt client and ACME library written in Go
Requires=network.target nss-lookup.target

[Service]
Type=oneshot
EnvironmentFile=/etc/lego.conf
ExecStart=/usr/bin/lego \
  --server https://acme-staging-v02.api.letsencrypt.org/directory \
  --http.webroot /var/www/acme \
  --path /var/lib/lego \
  --pem \
  --http \
  $LEGO_FLAGS

# You'd set e.g. the following in /etc/lego.conf:
# LEGO_FLAGS=\
# --accept-tos \
# --server https://acme-v02.api.letsencrypt.org/directory \
# --email webmaster@example.com \
# --domains example.com \
# --domains www.example.com \
# renew

# TODO: Add a script to reload nginx here. The only hurdle is, the lego
# user should not have permission to do that, so it can't run as that user.
# Maybe I'll just periodically sighup nginx.
# ExecStartPost=
PrivateTmp=true
User=lego
Group=www

# The settings below are substituted at deployment time by the deploy script.
RootImage={{ROOT_IMAGE}}
RootVerity={{ROOT_IMAGE}}.verity
RootHash={{ROOT_HASH}}

MountAPIVFS=true
MemoryDenyWriteExecute=true

# Ensure that the process can never gain new priviliges through execve, and that
# they cannot change kernel tunables.
NoNewPrivileges=true
ProtectControlGroups=true
ProtectKernelModules=true
ProtectKernelTunables=true

# Note: Setting ProtectSystem= has no advantage, as the squashfs filesystem is
# already read-only. Similarly, ProtectHome= is not useful because the paths it
# protect do not exist in our filesystem.

# Bind-mount /var/www/acme inside the chroot. This is where the response
# to the challenge will be written, it should be served by Nginx at
# .well-known/acme-challenge.
BindPaths=/var/www/acme
BindPaths=/var/lib/lego
BindReadOnlyPaths=/etc/lego.conf
BindReadOnlyPaths=/etc/resolv.conf

# The container image does not contain its own copy of the cacert package,
# we rely on the certificates from the host. On Flatcar, the certificates are
# in /usr/share, but the Go x509 implementation does not look there [1]. It does
# look in /etc/ssl, and Flatcar does have symlinks over there. So we need to
# mount both.
# [1]: https://go.dev/src/crypto/x509/root_linux.go
BindReadOnlyPaths=/etc/ssl/certs
BindReadOnlyPaths=/usr/share/ca-certificates
