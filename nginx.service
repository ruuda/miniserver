# Miniserver NGINX unit, based on upstream at
# https://www.nginx.com/resources/wiki/start/topics/examples/systemd/.

[Unit]
Description=The NGINX HTTP and reverse proxy server
After=network.target nss-lookup.target

[Service]
ExecStartPre=/usr/bin/nginx -t
ExecStart=/usr/bin/nginx
PrivateTmp=true
User=nginx
Group=nginx

# When stopping the unit, send SIGQUIT to the main process (which causes Nginx
# to shut down gracefully), and don't send anything to other processes. If the
# process has not shut down after a timeout, send SIGKILL to all processes.
KillMode=mixed
KillSignal=SIGQUIT

# The settings below are substituted at deployment time by the deploy script.
RootImage={{ROOT_IMAGE}}
RootVerity={{ROOT_IMAGE}}.verity
RootHash={{ROOT_HASH}}

MountAPIVFS=true
# TODO: Why does PrivateDevices cause a file not found error? It's a systemd
# error, so probably some path does not exist inside the container?
# PrivateDevices=true

MemoryDenyWriteExecute=true

# Ensure that the process can never gain new priviliges through execve, and that
# they cannot change kernel tunables.
NoNewPrivileges=true
ProtectControlGroups=true
ProtectKernelModules=true
ProtectKernelTunables=true

# Allow binding to priviliged ports (e.g. 80 and 443) as non-root user.
AmbientCapabilities=CAP_NET_BIND_SERVICE

# Note: Setting ProtectSystem= has no advantage, as the squashfs filesystem is
# already read-only. Similarly, ProtectHome= is not useful because the paths it
# protect do not exist in our filesystem.

# Bind-mount /var/log/nginx and inside the chroot. There is LogsDirectory=,
# which would make systemd take care of creation and permissions, but I never
# got that to work without "Failed to set up mount namespacing: No such file or
# directory" errors from systemd. Bind-mount /etc/nginx and /var/www inside the
# chroot as read-only.
BindPaths=/var/log/nginx
BindReadOnlyPaths=/etc/nginx
BindReadOnlyPaths=/var/lib/lego/certificates
BindReadOnlyPaths=/var/www

[Install]
WantedBy=multi-user.target
