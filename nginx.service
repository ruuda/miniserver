# Miniserver NGINX unit, based on upstream at
# https://www.nginx.com/resources/wiki/start/topics/examples/systemd/.

[Unit]
Description=The NGINX HTTP and reverse proxy server
After=network.target nss-lookup.target

[Service]
Type=forking
# TODO: PIDFile path refers to path on the host; we must use RuntimeDirectory=
# for this then.
PIDFile=/run/nginx/systemdworkaround/nginx.pid
ExecStartPre=/usr/bin/nginx -t
ExecStart=/usr/bin/nginx
ExecReload=/usr/bin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
User=nobody

RootImage=/home/ruud/repos/miniserver/miniserver.img
MountAPIVFS=true
# PrivateUsers=true
# PrivateDevices=true
MemoryDenyWriteExecute=true
# BindReadOnlyPaths=/etc

# TODO: Setting DynamicUser= appears to break LogsDirectory= with a "no such
# file or directory" error from systemd, though I think it should work. Diagnose
# what goes wrong.
# DynamicUser=true

#ProtectKernelTunables=true
#ProtectControlGroups=true

# Note: Setting ProtectSystem= has no advantage, as the squashfs filesystem is
# already read-only. Similarly, ProtectHome= is not useful because the paths it
# protect do not exist in our filesystem.

# TODO: Systemd only makes the directories below /var/log/nginx owned by the
# user specified in the User=, but not the directory itself. That prevents nginx
# from writing there. Find a cleaner solution than this.
RuntimeDirectory=nginx/systemdworkaround
LogsDirectory=nginx/systemdworkaround

# Allow binding to priviliged ports (e.g. 80 and 443) as non-root user.
AmbientCapabilities=CAP_NET_BIND_SERVICE

# TODO: Should mount /var/www from the host,
# but this is just to test.
BindReadOnlyPaths=/home/ruud/repos/blog/out:/var/www

[Install]
WantedBy=multi-user.target
